using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using DevExpress.XtraGrid.Views.Grid;
using System.Runtime.Remoting.Contexts;

namespace project2
{
    public partial class ucProfile : DevExpress.XtraEditors.XtraUserControl
    {
        public string tmpusername;

        public ucProfile()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            project2.COOKSGRAMEntities dbContext = new project2.COOKSGRAMEntities();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.ALLERGENS.Load();
            // This line of code is generated by Data Source Configuration Wizard
            gridControl1.DataSource = dbContext.ALLERGENS.Local.ToBindingList();
            this.loaddata();
        }
        public void loaddata()
        {
            COOKSGRAMEntities cOOKSGRAMEntities = new COOKSGRAMEntities();
            gridControl2.DataSource = cOOKSGRAMEntities.USER_ALLERGENS.Where(entity => entity.USER == tmpusername).ToList();

        }
        private void gridView1_DoubleClick(object sender, EventArgs e)
        {
            
            GridView gridView = sender as GridView;

            if (gridView != null && gridView.FocusedRowHandle >= 0)
            {
                // Seçili satırın verilerini Dictionary'ye dönüştürme
                Dictionary<string, object> rowData = new Dictionary<string, object>();

                foreach (DevExpress.XtraGrid.Columns.GridColumn column in gridView.Columns)
                {
                    rowData.Add(column.FieldName, gridView.GetRowCellValue(gridView.FocusedRowHandle, column));
                }
                string tmp = rowData["FOOD"].ToString();
                COOKSGRAMEntities cOOKSGRAMEntities = new COOKSGRAMEntities();
                var existalergen = cOOKSGRAMEntities.USER_ALLERGENS.FirstOrDefault(p => p.ALLERGEN_NAME == tmp);
                if (existalergen != null)
                {
                    MessageBox.Show("Allergen already added!");
                    return;
                }
                else
                {
                    try
                    {
                        USER_ALLERGENS uSER_ALLERGENS = new USER_ALLERGENS();
                        uSER_ALLERGENS.USER = tmpusername;
                        uSER_ALLERGENS.ALLERGEN_NAME = rowData["FOOD"].ToString();
                        cOOKSGRAMEntities.USER_ALLERGENS.Add(uSER_ALLERGENS);
                        cOOKSGRAMEntities.SaveChanges();
                    }
                    catch (Exception ex)
                    {

                        MessageBox.Show(ex.Message);

                    }
                    finally
                    {
                        this.loaddata();
                    }

                }
            }

        }

        private void gridControl2_DoubleClick(object sender, EventArgs e)
        {
            GridView gridView = sender as GridView;

            if (gridView2 != null && gridView2.FocusedRowHandle >= 0)
            {
                // Seçili satırın verilerini Dictionary'ye dönüştürme
                Dictionary<string, object> rowData = new Dictionary<string, object>();

                foreach (DevExpress.XtraGrid.Columns.GridColumn column in gridView2.Columns)
                {
                    rowData.Add(column.FieldName, gridView2.GetRowCellValue(gridView2.FocusedRowHandle, column));
                }
                int tmp = Convert.ToInt32(rowData["ID"]);
                COOKSGRAMEntities dbcontext = new COOKSGRAMEntities();
                var entityToDelete = dbcontext.USER_ALLERGENS
               .FirstOrDefault(entity => entity.ID == tmp);

                if (entityToDelete != null)
                {
                    dbcontext.USER_ALLERGENS.Remove(entityToDelete);
                    dbcontext.SaveChanges(); 
                }
                this.loaddata();
            }
        }

        private void ucProfile_Load(object sender, EventArgs e)
        {
            this.loaddata();
        }
    }
}
